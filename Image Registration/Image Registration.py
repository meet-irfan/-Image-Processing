# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1toVrG5ItvBD7QgIiQulhECYwRzx7cGqm
"""

# Install OpenCV if not already installed
!pip install opencv-python opencv-contrib-python

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to perform image registration
def image_registration(img1, img2):
    # Convert images to grayscale
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

    # Detect ORB features and descriptors
    orb = cv2.ORB_create()
    keypoints1, descriptors1 = orb.detectAndCompute(gray1, None)
    keypoints2, descriptors2 = orb.detectAndCompute(gray2, None)

    # Match descriptors using BFMatcher (Brute Force Matcher)
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    matches = bf.match(descriptors1, descriptors2)

    # Sort matches by distance (best matches first)
    matches = sorted(matches, key=lambda x: x.distance)

    # Draw matches between images
    img_matches = cv2.drawMatches(img1, keypoints1, img2, keypoints2, matches[:50], None, flags=2)

    # Show the matching keypoints
    plt.figure(figsize=(10, 8))
    plt.imshow(img_matches)
    plt.title('Matching Keypoints')
    plt.show()

    # Extract location of good matches
    src_pts = np.float32([keypoints1[m.queryIdx].pt for m in matches]).reshape(-1, 1, 2)
    dst_pts = np.float32([keypoints2[m.trainIdx].pt for m in matches]).reshape(-1, 1, 2)

    # Compute homography matrix using RANSAC
    M, mask = cv2.findHomography(dst_pts, src_pts, cv2.RANSAC, 5.0)

    # Use homography to warp img2 to img1's perspective
    height, width, channels = img1.shape
    img2_aligned = cv2.warpPerspective(img2, M, (width, height))

    return img2_aligned

# Load images (make sure to upload them to Colab or use the correct paths)
img1 = cv2.imread('/content/irfan.jpg')  # Reference image
img2 = cv2.imread('/content/2.jpg')      # Image to align

# Perform image registration
aligned_img = image_registration(img1, img2)

# Display the aligned image
plt.figure(figsize=(8, 8))
plt.imshow(cv2.cvtColor(aligned_img, cv2.COLOR_BGR2RGB))
plt.title('Aligned Image')
plt.show()

# Save the result
cv2.imwrite('aligned_image.jpg', aligned_img)